/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode *> st;
        vector<int> res;
        if(root == NULL){
            return res;
        }
        while(root != NULL){
            st.push(root);
            root = root->left;
        }
        while(!st.empty()){
            TreeNode *curr = st.top();
            res.push_back(curr->val);
            st.pop();
            curr = curr->right;
            while(curr != NULL){
                st.push(curr);
                curr = curr->left;
            }
        }
        return res;
    }
};

更简洁的写法
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode *> st;
        vector<int> res;
        TreeNode *pCurrent = root;
        while(!st.empty() || pCurrent != NULL){
            if(pCurrent != NULL){
                st.push(pCurrent);
                pCurrent = pCurrent->left;
            }else{
                TreeNode *pNode = st.top();
                res.push_back(pNode->val);
                st.pop();
                pCurrent = pNode->right;
            }
        }
        return res;
    }
};

递归：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root == NULL){
            return res;
        }
        res = inorderTraversal(root->left);
        res.push_back(root->val);
        vector<int> right = inorderTraversal(root->right);
        res.insert(res.end(), right.begin(), right.end());
        return res;
    }
};
