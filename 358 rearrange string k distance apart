class Solution {
public:
    string rearrangeString(string str, int k) {
        if(k == 0 || str.size() < 2){
            return str;
        }
        unordered_map<char, int> m_map;
        int n = str.size();
        for(int i = 0; i < n; ++i){
            m_map[str[i]]++;
        }
        priority_queue<pair<int, char> > pq;
        for(auto it = m_map.begin(); it != m_map.end(); ++it){
            pq.push(make_pair(it->second, it->first));
        }
        string res;
        while(!pq.empty()){
            vector<pair<int, char> > cache;
            int count = min(k, n);
            for(int i = 0; i < count; ++i){
                if(pq.empty()){
                    return "";
                }
                pair<int, char> tmp = pq.top();
                pq.pop();
                res.push_back(tmp.second);
                n--;
                if(--tmp.first > 0){
                    cache.push_back(tmp);
                }

            }
            for(int i = 0; i < cache.size(); ++i){
                pq.push(cache[i]);
            }
        }
        return res;

    }
};
