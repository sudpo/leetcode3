class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int, int> m_map;
        for(int i = 0; i < nums1.size(); ++i){
            m_map[nums1[i]]++;
        }
        vector<int> result;
        for(int i = 0; i < nums2.size(); ++i){
            if(m_map.find(nums2[i]) != m_map.end() && m_map[nums2[i]] > 0){
                result.push_back(nums2[i]);
                m_map[nums2[i]]--;
            }
        }
        return result;
    }
};

算法2， 如果两个数组是有序的 则用双指针即可 不需要额外空间

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int i = 0;
        int j = 0;
        vector<int> result;
        while(i < nums1.size() && j < nums2.size()){
            if(nums1[i] == nums2[j]){
                result.push_back(nums1[i]);
                i++;
                j++;
            }else if(nums1[i] < nums2[j]){
                i++;
            }else{
                j++;
            }
        }
        return result;
    }
};
