class Solution {
    bool isLinesValid(vector<vector<char>> & board){
        for(int i = 0; i < 9; ++i){
            unordered_set<char> line_set;
            for(int j = 0; j < 9; ++j){
                if(board[i][j] == '.'){
                    continue;
                }
                if(line_set.find(board[i][j]) != line_set.end()){
                    return false;
                }else{
                    line_set.insert(board[i][j]);
                }
            }
            line_set.clear();
            for(int j = 0; j < 9; ++j){
                if(board[j][i] == '.'){
                    continue;
                }
                if(line_set.find(board[j][i]) != line_set.end()){
                    return false;
                }else{
                    line_set.insert(board[j][i]);
                }
            }
        }
        return true;
    }

    bool isCellsValid(vector<vector<char> > & board){
        for(int i = 0; i < 9; i += 3){
            for(int j = 0; j < 9; j +=3){
                unordered_set<char> cell_set;
                for(int k = 0; k < 3; ++k){
                    for(int p = 0; p < 3; ++p){
                        if(board[i+k][j+p] != '.'){
                            if(cell_set.find(board[i+k][j+p]) != cell_set.end()){
                                return false;
                            }else{
                                cell_set.insert(board[i+k][j+p]);
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        return isCellsValid(board) && isLinesValid(board);
    }
};
