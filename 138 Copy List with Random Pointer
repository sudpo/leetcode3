算法1: 用map
/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(head == NULL) {
            return NULL;
        }

        unordered_map<RandomListNode *, RandomListNode *> oldToNew;
        oldToNew[NULL] = NULL;
        RandomListNode *curr = head;
        while(curr != NULL){
            RandomListNode *newNode = new RandomListNode(curr->label);
            oldToNew[curr] = newNode;
            curr = curr->next;
        }

        curr = head;
        while(curr != NULL){
            RandomListNode *newNode = oldToNew[curr];
            newNode -> next = oldToNew[curr->next];
            newNode -> random = oldToNew[curr->random];
            curr = curr->next;
        }
        return oldToNew[head];
    }
};

算法2: 不使用map,

/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        RandomListNode *newHead, *l1, *l2;
        if(head == NULL){
            return NULL;
        }
        for(l1 = head; l1 != NULL; l1 = l1->next->next){
            l2 = new RandomListNode(l1->label);
            l2->next = l1->next;
            l1->next = l2;
        }

        newHead = head -> next;
        for(l1 = head; l1 != NULL; l1 = l1->next->next){
            if(l1->random != NULL){
                l1->next->random = l1->random->next;
            }
        }

        for(l1 = head; l1 != NULL; l1 = l1->next){
            l2 = l1->next;
            l1->next = l2->next;
            if(l2->next != NULL){
                l2->next = l2->next->next;
            }
        }
        return newHead;
    }
};
